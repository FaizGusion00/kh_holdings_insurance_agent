<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class ProductCommissionRule extends Model
{
    use HasFactory;

    protected $fillable = [
        'product_id',
        'tier_level',
        'commission_type',
        'commission_percentage',
        'min_amount',
        'max_amount',
        'is_active',
        'description',
    ];

    protected $casts = [
        'commission_percentage' => 'decimal:4',
        'min_amount' => 'decimal:2',
        'max_amount' => 'decimal:2',
        'is_active' => 'boolean',
    ];

    /**
     * Get the insurance product this rule belongs to.
     */
    public function product()
    {
        return $this->belongsTo(InsuranceProduct::class);
    }

    /**
     * Get the commissions generated by this rule.
     */
    public function commissions()
    {
        return $this->hasMany(Commission::class, 'product_id', 'product_id');
    }

    /**
     * Scope to filter active rules.
     */
    public function scopeActive($query)
    {
        return $query->where('is_active', true);
    }

    /**
     * Scope to filter by tier level.
     */
    public function scopeByTierLevel($query, $level)
    {
        return $query->where('tier_level', $level);
    }

    /**
     * Scope to filter by commission type.
     */
    public function scopeByCommissionType($query, $type)
    {
        return $query->where('commission_type', $type);
    }

    /**
     * Scope to filter rules applicable to a specific amount.
     */
    public function scopeApplicableToAmount($query, $amount)
    {
        return $query->where(function ($q) use ($amount) {
            $q->where('min_amount', '<=', $amount)
              ->where(function ($subQ) use ($amount) {
                  $subQ->whereNull('max_amount')
                       ->orWhere('max_amount', '>=', $amount);
              });
        });
    }

    /**
     * Check if rule is applicable to a specific amount.
     */
    public function isApplicableToAmount($amount)
    {
        if ($amount < $this->min_amount) {
            return false;
        }

        if ($this->max_amount && $amount > $this->max_amount) {
            return false;
        }

        return true;
    }

    /**
     * Calculate commission amount for a given base amount.
     */
    public function calculateCommission($baseAmount)
    {
        if (!$this->isApplicableToAmount($baseAmount)) {
            return 0;
        }

        return ($baseAmount * $this->commission_percentage) / 100;
    }

    /**
     * Get formatted commission percentage.
     */
    public function getFormattedCommissionPercentageAttribute()
    {
        return number_format($this->commission_percentage, 2) . '%';
    }

    /**
     * Get formatted amount range.
     */
    public function getFormattedAmountRangeAttribute()
    {
        if ($this->max_amount) {
            return 'RM ' . number_format($this->min_amount, 2) . ' - RM ' . number_format($this->max_amount, 2);
        }

        return 'RM ' . number_format($this->min_amount, 2) . ' and above';
    }
}