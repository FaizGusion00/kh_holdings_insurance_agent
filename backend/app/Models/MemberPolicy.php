<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class MemberPolicy extends Model
{
    use HasFactory;

    protected $fillable = [
        'member_id',
        'product_id',
        'policy_number',
        'start_date',
        'end_date',
        'premium_amount',
        'payment_frequency',
        'total_paid',
        'next_payment_date',
        'status',
        'coverage_details',
        'terms_conditions',
    ];

    protected $casts = [
        'start_date' => 'date',
        'end_date' => 'date',
        'premium_amount' => 'decimal:2',
        'total_paid' => 'decimal:2',
        'next_payment_date' => 'date',
        'coverage_details' => 'array',
    ];

    /**
     * Get the member who owns this policy.
     */
    public function member()
    {
        return $this->belongsTo(Member::class);
    }

    /**
     * Get the insurance product for this policy.
     */
    public function product()
    {
        return $this->belongsTo(InsuranceProduct::class);
    }

    /**
     * Get the payment transactions for this policy.
     */
    public function paymentTransactions()
    {
        return $this->hasMany(PaymentTransaction::class);
    }

    /**
     * Get the commissions generated by this policy.
     */
    public function commissions()
    {
        return $this->hasMany(Commission::class);
    }

    /**
     * Scope to filter active policies.
     */
    public function scopeActive($query)
    {
        return $query->where('status', 'active');
    }

    /**
     * Scope to filter expired policies.
     */
    public function scopeExpired($query)
    {
        return $query->where('end_date', '<', now());
    }

    /**
     * Scope to filter policies by payment frequency.
     */
    public function scopeByPaymentFrequency($query, $frequency)
    {
        return $query->where('payment_frequency', $frequency);
    }

    /**
     * Check if policy is active.
     */
    public function isActive()
    {
        return $this->status === 'active' && $this->end_date > now();
    }

    /**
     * Check if policy is expired.
     */
    public function isExpired()
    {
        return $this->end_date < now();
    }

    /**
     * Get remaining premium amount.
     */
    public function getRemainingPremiumAttribute()
    {
        return $this->premium_amount - $this->total_paid;
    }

    /**
     * Get policy duration in days.
     */
    public function getDurationDaysAttribute()
    {
        return $this->start_date->diffInDays($this->end_date);
    }

    /**
     * Get next payment due status.
     */
    public function getNextPaymentDueAttribute()
    {
        if (!$this->next_payment_date) {
            return null;
        }

        $daysUntilDue = now()->diffInDays($this->next_payment_date, false);
        
        if ($daysUntilDue < 0) {
            return 'overdue';
        } elseif ($daysUntilDue <= 7) {
            return 'due_soon';
        } else {
            return 'up_to_date';
        }
    }
}