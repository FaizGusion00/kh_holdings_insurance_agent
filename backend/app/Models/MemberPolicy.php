<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class MemberPolicy extends Model
{
    use HasFactory;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'member_id',
        'product_id',
        'policy_number',
        'start_date',
        'end_date',
        'status',
        'monthly_premium',
        'total_paid',
        'next_payment_date',
    ];

    /**
     * The attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'start_date' => 'date',
            'end_date' => 'date',
            'next_payment_date' => 'date',
            'monthly_premium' => 'decimal:2',
            'total_paid' => 'decimal:2',
        ];
    }

    /**
     * Get the member who owns this policy.
     */
    public function member()
    {
        return $this->belongsTo(Member::class);
    }

    /**
     * Get the insurance product.
     */
    public function product()
    {
        return $this->belongsTo(InsuranceProduct::class, 'product_id');
    }

    /**
     * Get the payment transactions for this policy.
     */
    public function paymentTransactions()
    {
        return $this->hasMany(PaymentTransaction::class, 'policy_id');
    }

    /**
     * Get the commissions generated by this policy.
     */
    public function commissions()
    {
        return $this->hasMany(Commission::class, 'policy_id');
    }

    /**
     * Scope to filter active policies.
     */
    public function scopeActive($query)
    {
        return $query->where('status', 'active');
    }

    /**
     * Scope to filter expired policies.
     */
    public function scopeExpired($query)
    {
        return $query->where('status', 'expired');
    }

    /**
     * Check if policy is active.
     */
    public function isActive()
    {
        return $this->status === 'active' && 
               $this->start_date <= now() && 
               $this->end_date >= now();
    }

    /**
     * Check if payment is due.
     */
    public function isPaymentDue()
    {
        return $this->next_payment_date <= now();
    }

    /**
     * Generate unique policy number.
     */
    public static function generatePolicyNumber()
    {
        do {
            $number = 'POL' . date('Y') . str_pad(mt_rand(1, 999999), 6, '0', STR_PAD_LEFT);
        } while (self::where('policy_number', $number)->exists());

        return $number;
    }

    /**
     * Calculate next payment date based on frequency.
     */
    public function calculateNextPaymentDate()
    {
        $frequency = $this->product->payment_frequency;
        
        switch ($frequency) {
            case 'monthly':
                return $this->next_payment_date->addMonth();
            case 'quarterly':
                return $this->next_payment_date->addMonths(3);
            case 'semi_annually':
                return $this->next_payment_date->addMonths(6);
            case 'annually':
                return $this->next_payment_date->addYear();
            default:
                return $this->next_payment_date->addMonth();
        }
    }
}