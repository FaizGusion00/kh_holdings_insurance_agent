<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class InsuranceProduct extends Model
{
    use HasFactory;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'product_type',
        'name',
        'description',
        'base_price',
        'payment_frequency',
        'price_multiplier',
        'coverage_details',
        'waiting_period_days',
        'max_coverage_amount',
        'is_active',
    ];

    /**
     * The attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'coverage_details' => 'array',
            'base_price' => 'decimal:2',
            'price_multiplier' => 'decimal:2',
            'max_coverage_amount' => 'decimal:2',
            'is_active' => 'boolean',
        ];
    }

    /**
     * Get the commission rules for this product.
     */
    public function commissionRules()
    {
        return $this->hasMany(ProductCommissionRule::class, 'product_id');
    }

    /**
     * Get the member policies for this product.
     */
    public function memberPolicies()
    {
        return $this->hasMany(MemberPolicy::class, 'product_id');
    }

    /**
     * Get the commissions generated by this product.
     */
    public function commissions()
    {
        return $this->hasMany(Commission::class, 'product_id');
    }

    /**
     * Get active commission rules only.
     */
    public function activeCommissionRules()
    {
        return $this->commissionRules()->where('is_active', true);
    }

    /**
     * Calculate actual price based on payment frequency.
     */
    public function getActualPrice($paymentFrequency = 'monthly')
    {
        $multipliers = [
            'monthly' => 1,
            'quarterly' => 3,
            'semi_annually' => 6,
            'annually' => 12,
        ];

        $baseMultiplier = $multipliers[$paymentFrequency] ?? 1;
        return $this->base_price * $baseMultiplier * $this->price_multiplier;
    }
}